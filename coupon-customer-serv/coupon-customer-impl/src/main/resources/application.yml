server:
  port: 20001
  # 在返回给页面的结果里，把错误信息添加到message里
  error:
    include-message: always

spring:
  application:
    name: coupon-customer-serv
  #  datasource:
  #    # mysql数据源
  #    username: root
  ##    password:
  #    url: jdbc:mysql://127.0.0.1:3306/zerotone_coupon?autoReconnect=true&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC
  #    type: com.zaxxer.hikari.HikariDataSource
  #    driver-class-name: com.mysql.cj.jdbc.Driver
  #    # 连接池
  #    hikari:
  #      pool-name: ZerotoneCouponHikari
  #      connection-timeout: 5000
  #      idle-timeout: 30000
  #      maximum-pool-size: 10
  #      minimum-idle: 5
  #      max-lifetime: 60000
  #      auto-commit: true
  jpa:
    show-sql: true
    hibernate:
      # 在生产环境全部为none，防止ddl结构被自动执行
      ddl-auto: none
    properties:
      hibernate.show_sql: true
      hibernate.format_sql: true
    open-in-view: false


  cloud:
    nacos:
      discovery:
        # Nacos的服务注册地址，可以配置多个，逗号分隔
        server-addr: localhost:8848,localhost:8948
        # 服务注册到Nacos上的名称，一般不用配置
        service: coupon-customer-serv
        # nacos客户端向服务端发送心跳的时间间隔，时间单位其实是ms
        heart-beat-interval: 5000
        # 服务端没有接受到客户端心跳请求就将其设为不健康的时间间隔，默认为15s
        # 注：推荐值该值为15s即可，如果有的业务线希望服务下线或者出故障时希望尽快被发现，可以适当减少该值
        heart-beat-timeout: 20000
        # 元数据部分 - 可以自己随便定制
        metadata:
          mydata: abc
        # 客户端在启动时是否读取本地配置项(一个文件)来获取服务列表
        # 注：推荐该值为false，若改成true。则客户端会在本地的一个
        # 文件中保存服务信息，当下次宕机启动时，会优先读取本地的配置对外提供服务。
        naming-load-cache-at-start: false
        # 命名空间ID，Nacos通过不同的命名空间来区分不同的环境，进行数据隔离，
        namespace: dev
        # 创建不同的集群
        cluster-name: Cluster-A
        # [注意]两个服务如果存在上下游调用关系，必须配置相同的group才能发起访问
        group: myGroup
        # 向注册中心注册服务，默认为true
        # 如果只消费服务，不作为服务提供方，倒是可以设置成false，减少开销
        register-enabled: true

    sentinel:
      transport:
        # sentinel api端口，默认8719
        port: 8719
        # dashboard地址
        dashboard: localhost:8080

      datasource:
        # 数据源的key，可以自由命名
        geekbang-flow: # 指定当前数据源是nacos
          nacos: # 设置Nacos的连接地址、命名空间和Group ID
            server-addr: localhost:8848
            namespace: dev
            groupId: SENTINEL_GROUP
            # 设置Nacos中配置文件的命名规则
            dataId: ${spring.application.name}-flow-rules
            # 必填的重要字段，指定当前规则类型是"限流"
            rule-type: flow

    stream:
      # 如果你项目里只对接一个中间件，那么不用定义binders
      # 当系统要定义多个不同消息中间件的时候，使用binders定义
      binders:
        my-rabbit:
          type: rabbit # 消息中间件类型
          environment: # 连接信息
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest
      bindings:
        # 添加coupon -Producer
        addCoupon-out-0:
          destination: request-coupon-topic
          content-type: application/json
          binder: my-rabbit
        # 添加coupon - Consumer
        addCoupon-in-0:
          destination: request-coupon-topic
          content-type: application/json
          # 消费组，同一个组内只能被消费一次
          group: add-coupon-group
          binder: my-rabbit
        # 删除coupon - Producer
        deleteCoupon-out-0:
          destination: delete-coupon-topic
          content-type: text/plain
          binder: my-rabbit
        # 删除coupon - Consumer
        deleteCoupon-in-0:
          destination: delete-coupon-topic
          content-type: text/plain
          group: delete-coupon-group
          binder: my-rabbit
        # 延迟发券 - producer
        addCouponDelay-out-0:
          destination: request-coupon-delayed-topic
          content-type: application/json
          binder: my-rabbit
        # 延迟发券 - Consumer
        addCouponDelay-in-0:
          destination: request-coupon-delayed-topic
          content-type: application/json
          # 消费组，同一个组内只能被消费一次
          group: add-coupon-group
          binder: my-rabbit
          consumer:
          # 如果最大尝试次数为1，即不重试
          # 默认是做3次尝试
            max-attempts: 1

      # 如果你的项目中只有一组消费者，那么你完全不用搭理这个配置项，
      # 只要确保消费者代码中的 method name 和 bindings 下声明的消费者信道名称相对应就好了；
      # 如果你的项目中有多组消费者（比如我声明了 addCoupon 和 deleteCoupon 两个消费者），
      # 在这种情况下，你需要将消费者所对应的 function name 添加到
      # spring.cloud.stream.function，否则消费者无法被绑定到正确的信道。
      function:
        definition: addCoupon;deleteCoupon;addCouponDelay

      # 因为我们底层的消息组件是 RabbitMQ，所以这段配置被添加到了
      # spring.cloud.stream.rabbit 路径下。
      # 我在对应的 Consumer 信道上设置了 auto-bind-dlq=true，
      # 开启了死信队列的功能。
      rabbit:
        bindings:
          deleteCoupon-in-0:
            consumer:
              auto-bind-dlq: true

          addCouponDelay-out-0:
            producer:
              # 这是延迟队列最为关键的一个属性
              # 如果没有设置，那么系统将会创建一个普通的交换机，
              # 而不是具有延迟消费功能的交换机
              delayed-exchange: true
          addCouponDelay-in-0:
            consumer:
              delayed-exchange: true

    alibaba:
      seata:
        tx-service-group: seata-server-group

  zipkin:
    sender:
      type: rabbit
    rabbitmq:
      addresses: 127.0.0.1:5672
      queue: zipkin

logging:
  level:
    com.broadview.coupon: debug
    # 开启Feign日志
    xyz.zerotone.coupon.customer.feign.TemplateService: debug
    xyz.zerotone.coupon.customer.feign.CalculationService: debug

seata:
  application-id: coupon-customer-serv
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: localhost:8848
      namespace: dev
      group: myGroup
      cluster: default
  service:
    vgroup-mapping:
      seata-server-group: default

feign:
  client:
    config:
      # 全局超时配置
      default:
        # 网络连接阶段1秒超时
        connectTimeout: 1000
        # 服务请求响应阶段5秒超时
        readTimeout: 5000
      # 针对某个特定服务的超时配置
      coupon-template-serv:
        connectTimeout: 1000
        readTimeout: 5000

  circuitbreaker:
    enabled: true